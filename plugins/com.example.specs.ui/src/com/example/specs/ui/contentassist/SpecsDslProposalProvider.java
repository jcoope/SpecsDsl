/*
 * generated by Xtext 2.21.0
 */
package com.example.specs.ui.contentassist;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;

import com.example.library.Memory;
import com.example.library.Processor;

/**
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#content-assist
 * on how to customize the content assistant.
 */
public class SpecsDslProposalProvider extends AbstractSpecsDslProposalProvider {
	
	@Override
	public void complete_ClockSpeed(EObject model, RuleCall ruleCall, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		if (context.getCurrentModel().eCrossReferences().size() == 1 && context.getCurrentModel().eCrossReferences().get(0) instanceof Processor) {
			Processor cpu = (Processor) context.getCurrentModel().eCrossReferences().get(0);
			acceptor.accept(createCompletionProposal("clockSpeed " + Float.toString(cpu.getClockSpeed()) + " cores " + cpu.getCores() + " }", context));
		}
		super.complete_ClockSpeed(model, ruleCall, context, acceptor);
	}
	
	@Override
	public void complete_Capacity(EObject model, RuleCall ruleCall, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		if (context.getCurrentModel().eCrossReferences().size() == 1 && context.getCurrentModel().eCrossReferences().get(0) instanceof Memory) {
			Memory m = (Memory) context.getCurrentModel().eCrossReferences().get(0);
			acceptor.accept(createCompletionProposal("capacity " +  m.getCapacity() + " }", context));
		}
		super.complete_Capacity(model, ruleCall, context, acceptor);
	}
}
