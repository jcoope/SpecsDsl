/*
 * generated by Xtext 2.21.0
 */
package com.example.specs.serializer;

import com.example.specs.services.SpecsDslGrammarAccess;
import com.example.specs.specsDsl.Capacity;
import com.example.specs.specsDsl.ClockSpeed;
import com.example.specs.specsDsl.Cores;
import com.example.specs.specsDsl.Memory;
import com.example.specs.specsDsl.Model;
import com.example.specs.specsDsl.Motherboard;
import com.example.specs.specsDsl.Processor;
import com.example.specs.specsDsl.Spec;
import com.example.specs.specsDsl.SpecsDslPackage;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class SpecsDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SpecsDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SpecsDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SpecsDslPackage.CAPACITY:
				sequence_Capacity(context, (Capacity) semanticObject); 
				return; 
			case SpecsDslPackage.CLOCK_SPEED:
				sequence_ClockSpeed(context, (ClockSpeed) semanticObject); 
				return; 
			case SpecsDslPackage.CORES:
				sequence_Cores(context, (Cores) semanticObject); 
				return; 
			case SpecsDslPackage.MEMORY:
				sequence_Memory(context, (Memory) semanticObject); 
				return; 
			case SpecsDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case SpecsDslPackage.MOTHERBOARD:
				sequence_Motherboard(context, (Motherboard) semanticObject); 
				return; 
			case SpecsDslPackage.PROCESSOR:
				sequence_Processor(context, (Processor) semanticObject); 
				return; 
			case SpecsDslPackage.SPEC:
				sequence_Spec(context, (Spec) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Capacity returns Capacity
	 *
	 * Constraint:
	 *     capacity=INT
	 */
	protected void sequence_Capacity(ISerializationContext context, Capacity semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SpecsDslPackage.Literals.CAPACITY__CAPACITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SpecsDslPackage.Literals.CAPACITY__CAPACITY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCapacityAccess().getCapacityINTTerminalRuleCall_1_0(), semanticObject.getCapacity());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ClockSpeed returns ClockSpeed
	 *
	 * Constraint:
	 *     clockSpeed=FLOAT
	 */
	protected void sequence_ClockSpeed(ISerializationContext context, ClockSpeed semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SpecsDslPackage.Literals.CLOCK_SPEED__CLOCK_SPEED) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SpecsDslPackage.Literals.CLOCK_SPEED__CLOCK_SPEED));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getClockSpeedAccess().getClockSpeedFLOATParserRuleCall_1_0(), semanticObject.getClockSpeed());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Cores returns Cores
	 *
	 * Constraint:
	 *     cores=INT
	 */
	protected void sequence_Cores(ISerializationContext context, Cores semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SpecsDslPackage.Literals.CORES__CORES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SpecsDslPackage.Literals.CORES__CORES));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCoresAccess().getCoresINTTerminalRuleCall_1_0(), semanticObject.getCores());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Memory returns Memory
	 *
	 * Constraint:
	 *     (name=[Memory|ID] capacity=Capacity)
	 */
	protected void sequence_Memory(ISerializationContext context, Memory semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SpecsDslPackage.Literals.MEMORY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SpecsDslPackage.Literals.MEMORY__NAME));
			if (transientValues.isValueTransient(semanticObject, SpecsDslPackage.Literals.MEMORY__CAPACITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SpecsDslPackage.Literals.MEMORY__CAPACITY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMemoryAccess().getNameMemoryIDTerminalRuleCall_1_0_1(), semanticObject.eGet(SpecsDslPackage.Literals.MEMORY__NAME, false));
		feeder.accept(grammarAccess.getMemoryAccess().getCapacityCapacityParserRuleCall_3_0(), semanticObject.getCapacity());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     specs+=Spec+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Motherboard returns Motherboard
	 *
	 * Constraint:
	 *     name=[Motherboard|ID]
	 */
	protected void sequence_Motherboard(ISerializationContext context, Motherboard semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SpecsDslPackage.Literals.MOTHERBOARD__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SpecsDslPackage.Literals.MOTHERBOARD__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMotherboardAccess().getNameMotherboardIDTerminalRuleCall_1_0_1(), semanticObject.eGet(SpecsDslPackage.Literals.MOTHERBOARD__NAME, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Processor returns Processor
	 *
	 * Constraint:
	 *     (name=[Processor|ID] clockSpeed=ClockSpeed cores=Cores)
	 */
	protected void sequence_Processor(ISerializationContext context, Processor semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SpecsDslPackage.Literals.PROCESSOR__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SpecsDslPackage.Literals.PROCESSOR__NAME));
			if (transientValues.isValueTransient(semanticObject, SpecsDslPackage.Literals.PROCESSOR__CLOCK_SPEED) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SpecsDslPackage.Literals.PROCESSOR__CLOCK_SPEED));
			if (transientValues.isValueTransient(semanticObject, SpecsDslPackage.Literals.PROCESSOR__CORES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SpecsDslPackage.Literals.PROCESSOR__CORES));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProcessorAccess().getNameProcessorIDTerminalRuleCall_1_0_1(), semanticObject.eGet(SpecsDslPackage.Literals.PROCESSOR__NAME, false));
		feeder.accept(grammarAccess.getProcessorAccess().getClockSpeedClockSpeedParserRuleCall_3_0(), semanticObject.getClockSpeed());
		feeder.accept(grammarAccess.getProcessorAccess().getCoresCoresParserRuleCall_4_0(), semanticObject.getCores());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Spec returns Spec
	 *
	 * Constraint:
	 *     (name=STRING processor=Processor motherboard=Motherboard memories+=Memory*)
	 */
	protected void sequence_Spec(ISerializationContext context, Spec semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
