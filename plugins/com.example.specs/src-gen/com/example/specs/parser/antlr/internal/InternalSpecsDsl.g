/*
 * generated by Xtext 2.21.0
 */
grammar InternalSpecsDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package com.example.specs.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.example.specs.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.example.specs.services.SpecsDslGrammarAccess;

}

@parser::members {

 	private SpecsDslGrammarAccess grammarAccess;

    public InternalSpecsDslParser(TokenStream input, SpecsDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected SpecsDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getSpecsSpecParserRuleCall_0());
			}
			lv_specs_0_0=ruleSpec
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"specs",
					lv_specs_0_0,
					"com.example.specs.SpecsDsl.Spec");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleSpec
entryRuleSpec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSpecRule()); }
	iv_ruleSpec=ruleSpec
	{ $current=$iv_ruleSpec.current; }
	EOF;

// Rule Spec
ruleSpec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Specification'
		{
			newLeafNode(otherlv_0, grammarAccess.getSpecAccess().getSpecificationKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_STRING
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSpecAccess().getNameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSpecRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getSpecAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSpecAccess().getProcessorProcessorParserRuleCall_3_0());
				}
				lv_processor_3_0=ruleProcessor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSpecRule());
					}
					set(
						$current,
						"processor",
						lv_processor_3_0,
						"com.example.specs.SpecsDsl.Processor");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSpecAccess().getMotherboardMotherboardParserRuleCall_4_0());
				}
				lv_motherboard_4_0=ruleMotherboard
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSpecRule());
					}
					set(
						$current,
						"motherboard",
						lv_motherboard_4_0,
						"com.example.specs.SpecsDsl.Motherboard");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSpecAccess().getMemoriesMemoryParserRuleCall_5_0());
				}
				lv_memories_5_0=ruleMemory
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSpecRule());
					}
					add(
						$current,
						"memories",
						lv_memories_5_0,
						"com.example.specs.SpecsDsl.Memory");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleProcessor
entryRuleProcessor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcessorRule()); }
	iv_ruleProcessor=ruleProcessor
	{ $current=$iv_ruleProcessor.current; }
	EOF;

// Rule Processor
ruleProcessor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Processor'
		{
			newLeafNode(otherlv_0, grammarAccess.getProcessorAccess().getProcessorKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProcessorRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getProcessorAccess().getNameProcessorCrossReference_1_0());
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getProcessorAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProcessorAccess().getClockSpeedClockSpeedParserRuleCall_3_0());
				}
				lv_clockSpeed_3_0=ruleClockSpeed
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcessorRule());
					}
					set(
						$current,
						"clockSpeed",
						lv_clockSpeed_3_0,
						"com.example.specs.SpecsDsl.ClockSpeed");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getProcessorAccess().getCoresCoresParserRuleCall_4_0());
				}
				lv_cores_4_0=ruleCores
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcessorRule());
					}
					set(
						$current,
						"cores",
						lv_cores_4_0,
						"com.example.specs.SpecsDsl.Cores");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getProcessorAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleClockSpeed
entryRuleClockSpeed returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClockSpeedRule()); }
	iv_ruleClockSpeed=ruleClockSpeed
	{ $current=$iv_ruleClockSpeed.current; }
	EOF;

// Rule ClockSpeed
ruleClockSpeed returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='clockSpeed'
		{
			newLeafNode(otherlv_0, grammarAccess.getClockSpeedAccess().getClockSpeedKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getClockSpeedAccess().getClockSpeedFLOATParserRuleCall_1_0());
				}
				lv_clockSpeed_1_0=ruleFLOAT
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClockSpeedRule());
					}
					set(
						$current,
						"clockSpeed",
						lv_clockSpeed_1_0,
						"com.example.specs.SpecsDsl.FLOAT");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCores
entryRuleCores returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCoresRule()); }
	iv_ruleCores=ruleCores
	{ $current=$iv_ruleCores.current; }
	EOF;

// Rule Cores
ruleCores returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='cores'
		{
			newLeafNode(otherlv_0, grammarAccess.getCoresAccess().getCoresKeyword_0());
		}
		(
			(
				lv_cores_1_0=RULE_INT
				{
					newLeafNode(lv_cores_1_0, grammarAccess.getCoresAccess().getCoresINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCoresRule());
					}
					setWithLastConsumed(
						$current,
						"cores",
						lv_cores_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleMotherboard
entryRuleMotherboard returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMotherboardRule()); }
	iv_ruleMotherboard=ruleMotherboard
	{ $current=$iv_ruleMotherboard.current; }
	EOF;

// Rule Motherboard
ruleMotherboard returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Motherboard'
		{
			newLeafNode(otherlv_0, grammarAccess.getMotherboardAccess().getMotherboardKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMotherboardRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getMotherboardAccess().getNameMotherboardCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleMemory
entryRuleMemory returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMemoryRule()); }
	iv_ruleMemory=ruleMemory
	{ $current=$iv_ruleMemory.current; }
	EOF;

// Rule Memory
ruleMemory returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Memory'
		{
			newLeafNode(otherlv_0, grammarAccess.getMemoryAccess().getMemoryKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMemoryRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getMemoryAccess().getNameMemoryCrossReference_1_0());
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getMemoryAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMemoryAccess().getCapacityCapacityParserRuleCall_3_0());
				}
				lv_capacity_3_0=ruleCapacity
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMemoryRule());
					}
					set(
						$current,
						"capacity",
						lv_capacity_3_0,
						"com.example.specs.SpecsDsl.Capacity");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getMemoryAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleCapacity
entryRuleCapacity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCapacityRule()); }
	iv_ruleCapacity=ruleCapacity
	{ $current=$iv_ruleCapacity.current; }
	EOF;

// Rule Capacity
ruleCapacity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='capacity'
		{
			newLeafNode(otherlv_0, grammarAccess.getCapacityAccess().getCapacityKeyword_0());
		}
		(
			(
				lv_capacity_1_0=RULE_INT
				{
					newLeafNode(lv_capacity_1_0, grammarAccess.getCapacityAccess().getCapacityINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCapacityRule());
					}
					setWithLastConsumed(
						$current,
						"capacity",
						lv_capacity_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleFLOAT
entryRuleFLOAT returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFLOATRule()); }
	iv_ruleFLOAT=ruleFLOAT
	{ $current=$iv_ruleFLOAT.current.getText(); }
	EOF;

// Rule FLOAT
ruleFLOAT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getFLOATAccess().getINTTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getFLOATAccess().getFullStopKeyword_1_0());
			}
			this_INT_2=RULE_INT
			{
				$current.merge(this_INT_2);
			}
			{
				newLeafNode(this_INT_2, grammarAccess.getFLOATAccess().getINTTerminalRuleCall_1_1());
			}
		)?
	)
;

RULE_SL_COMMENT : '--' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
