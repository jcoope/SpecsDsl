/*
 * generated by Xtext 2.21.0
 */
grammar InternalSpecsDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package com.example.specs.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.example.specs.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import com.example.specs.services.SpecsDslGrammarAccess;

}
@parser::members {
	private SpecsDslGrammarAccess grammarAccess;

	public void setGrammarAccess(SpecsDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getSpecsAssignment()); }
		(rule__Model__SpecsAssignment)*
		{ after(grammarAccess.getModelAccess().getSpecsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSpec
entryRuleSpec
:
{ before(grammarAccess.getSpecRule()); }
	 ruleSpec
{ after(grammarAccess.getSpecRule()); } 
	 EOF 
;

// Rule Spec
ruleSpec 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSpecAccess().getGroup()); }
		(rule__Spec__Group__0)
		{ after(grammarAccess.getSpecAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProcessor
entryRuleProcessor
:
{ before(grammarAccess.getProcessorRule()); }
	 ruleProcessor
{ after(grammarAccess.getProcessorRule()); } 
	 EOF 
;

// Rule Processor
ruleProcessor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProcessorAccess().getGroup()); }
		(rule__Processor__Group__0)
		{ after(grammarAccess.getProcessorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClockSpeed
entryRuleClockSpeed
:
{ before(grammarAccess.getClockSpeedRule()); }
	 ruleClockSpeed
{ after(grammarAccess.getClockSpeedRule()); } 
	 EOF 
;

// Rule ClockSpeed
ruleClockSpeed 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClockSpeedAccess().getGroup()); }
		(rule__ClockSpeed__Group__0)
		{ after(grammarAccess.getClockSpeedAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCores
entryRuleCores
:
{ before(grammarAccess.getCoresRule()); }
	 ruleCores
{ after(grammarAccess.getCoresRule()); } 
	 EOF 
;

// Rule Cores
ruleCores 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCoresAccess().getGroup()); }
		(rule__Cores__Group__0)
		{ after(grammarAccess.getCoresAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMotherboard
entryRuleMotherboard
:
{ before(grammarAccess.getMotherboardRule()); }
	 ruleMotherboard
{ after(grammarAccess.getMotherboardRule()); } 
	 EOF 
;

// Rule Motherboard
ruleMotherboard 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMotherboardAccess().getGroup()); }
		(rule__Motherboard__Group__0)
		{ after(grammarAccess.getMotherboardAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMemory
entryRuleMemory
:
{ before(grammarAccess.getMemoryRule()); }
	 ruleMemory
{ after(grammarAccess.getMemoryRule()); } 
	 EOF 
;

// Rule Memory
ruleMemory 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMemoryAccess().getGroup()); }
		(rule__Memory__Group__0)
		{ after(grammarAccess.getMemoryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCapacity
entryRuleCapacity
:
{ before(grammarAccess.getCapacityRule()); }
	 ruleCapacity
{ after(grammarAccess.getCapacityRule()); } 
	 EOF 
;

// Rule Capacity
ruleCapacity 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCapacityAccess().getGroup()); }
		(rule__Capacity__Group__0)
		{ after(grammarAccess.getCapacityAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFLOAT
entryRuleFLOAT
:
{ before(grammarAccess.getFLOATRule()); }
	 ruleFLOAT
{ after(grammarAccess.getFLOATRule()); } 
	 EOF 
;

// Rule FLOAT
ruleFLOAT 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFLOATAccess().getGroup()); }
		(rule__FLOAT__Group__0)
		{ after(grammarAccess.getFLOATAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Spec__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Spec__Group__0__Impl
	rule__Spec__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Spec__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpecAccess().getSpecificationKeyword_0()); }
	'Specification'
	{ after(grammarAccess.getSpecAccess().getSpecificationKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Spec__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Spec__Group__1__Impl
	rule__Spec__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Spec__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpecAccess().getNameAssignment_1()); }
	(rule__Spec__NameAssignment_1)
	{ after(grammarAccess.getSpecAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Spec__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Spec__Group__2__Impl
	rule__Spec__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Spec__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpecAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getSpecAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Spec__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Spec__Group__3__Impl
	rule__Spec__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Spec__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpecAccess().getProcessorAssignment_3()); }
	(rule__Spec__ProcessorAssignment_3)
	{ after(grammarAccess.getSpecAccess().getProcessorAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Spec__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Spec__Group__4__Impl
	rule__Spec__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Spec__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpecAccess().getMotherboardAssignment_4()); }
	(rule__Spec__MotherboardAssignment_4)
	{ after(grammarAccess.getSpecAccess().getMotherboardAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Spec__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Spec__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Spec__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpecAccess().getMemoriesAssignment_5()); }
	(rule__Spec__MemoriesAssignment_5)*
	{ after(grammarAccess.getSpecAccess().getMemoriesAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Processor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Processor__Group__0__Impl
	rule__Processor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Processor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcessorAccess().getProcessorKeyword_0()); }
	'Processor'
	{ after(grammarAccess.getProcessorAccess().getProcessorKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Processor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Processor__Group__1__Impl
	rule__Processor__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Processor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcessorAccess().getNameAssignment_1()); }
	(rule__Processor__NameAssignment_1)
	{ after(grammarAccess.getProcessorAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Processor__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Processor__Group__2__Impl
	rule__Processor__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Processor__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcessorAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getProcessorAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Processor__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Processor__Group__3__Impl
	rule__Processor__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Processor__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcessorAccess().getClockSpeedAssignment_3()); }
	(rule__Processor__ClockSpeedAssignment_3)
	{ after(grammarAccess.getProcessorAccess().getClockSpeedAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Processor__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Processor__Group__4__Impl
	rule__Processor__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Processor__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcessorAccess().getCoresAssignment_4()); }
	(rule__Processor__CoresAssignment_4)
	{ after(grammarAccess.getProcessorAccess().getCoresAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Processor__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Processor__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Processor__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcessorAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getProcessorAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ClockSpeed__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClockSpeed__Group__0__Impl
	rule__ClockSpeed__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClockSpeed__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClockSpeedAccess().getClockSpeedKeyword_0()); }
	'clockSpeed'
	{ after(grammarAccess.getClockSpeedAccess().getClockSpeedKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClockSpeed__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClockSpeed__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClockSpeed__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClockSpeedAccess().getClockSpeedAssignment_1()); }
	(rule__ClockSpeed__ClockSpeedAssignment_1)
	{ after(grammarAccess.getClockSpeedAccess().getClockSpeedAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Cores__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Cores__Group__0__Impl
	rule__Cores__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Cores__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCoresAccess().getCoresKeyword_0()); }
	'cores'
	{ after(grammarAccess.getCoresAccess().getCoresKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Cores__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Cores__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Cores__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCoresAccess().getCoresAssignment_1()); }
	(rule__Cores__CoresAssignment_1)
	{ after(grammarAccess.getCoresAccess().getCoresAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Motherboard__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Motherboard__Group__0__Impl
	rule__Motherboard__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Motherboard__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMotherboardAccess().getMotherboardKeyword_0()); }
	'Motherboard'
	{ after(grammarAccess.getMotherboardAccess().getMotherboardKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Motherboard__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Motherboard__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Motherboard__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMotherboardAccess().getNameAssignment_1()); }
	(rule__Motherboard__NameAssignment_1)
	{ after(grammarAccess.getMotherboardAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Memory__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Memory__Group__0__Impl
	rule__Memory__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Memory__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMemoryAccess().getMemoryKeyword_0()); }
	'Memory'
	{ after(grammarAccess.getMemoryAccess().getMemoryKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Memory__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Memory__Group__1__Impl
	rule__Memory__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Memory__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMemoryAccess().getNameAssignment_1()); }
	(rule__Memory__NameAssignment_1)
	{ after(grammarAccess.getMemoryAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Memory__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Memory__Group__2__Impl
	rule__Memory__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Memory__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMemoryAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getMemoryAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Memory__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Memory__Group__3__Impl
	rule__Memory__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Memory__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMemoryAccess().getCapacityAssignment_3()); }
	(rule__Memory__CapacityAssignment_3)
	{ after(grammarAccess.getMemoryAccess().getCapacityAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Memory__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Memory__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Memory__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMemoryAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getMemoryAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Capacity__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Capacity__Group__0__Impl
	rule__Capacity__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Capacity__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCapacityAccess().getCapacityKeyword_0()); }
	'capacity'
	{ after(grammarAccess.getCapacityAccess().getCapacityKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Capacity__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Capacity__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Capacity__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCapacityAccess().getCapacityAssignment_1()); }
	(rule__Capacity__CapacityAssignment_1)
	{ after(grammarAccess.getCapacityAccess().getCapacityAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FLOAT__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FLOAT__Group__0__Impl
	rule__FLOAT__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FLOAT__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFLOATAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
	{ after(grammarAccess.getFLOATAccess().getINTTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FLOAT__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FLOAT__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FLOAT__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFLOATAccess().getGroup_1()); }
	(rule__FLOAT__Group_1__0)?
	{ after(grammarAccess.getFLOATAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FLOAT__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FLOAT__Group_1__0__Impl
	rule__FLOAT__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FLOAT__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFLOATAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getFLOATAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FLOAT__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FLOAT__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FLOAT__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFLOATAccess().getINTTerminalRuleCall_1_1()); }
	RULE_INT
	{ after(grammarAccess.getFLOATAccess().getINTTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__SpecsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getSpecsSpecParserRuleCall_0()); }
		ruleSpec
		{ after(grammarAccess.getModelAccess().getSpecsSpecParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Spec__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSpecAccess().getNameSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getSpecAccess().getNameSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Spec__ProcessorAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSpecAccess().getProcessorProcessorParserRuleCall_3_0()); }
		ruleProcessor
		{ after(grammarAccess.getSpecAccess().getProcessorProcessorParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Spec__MotherboardAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSpecAccess().getMotherboardMotherboardParserRuleCall_4_0()); }
		ruleMotherboard
		{ after(grammarAccess.getSpecAccess().getMotherboardMotherboardParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Spec__MemoriesAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSpecAccess().getMemoriesMemoryParserRuleCall_5_0()); }
		ruleMemory
		{ after(grammarAccess.getSpecAccess().getMemoriesMemoryParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Processor__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcessorAccess().getNameProcessorCrossReference_1_0()); }
		(
			{ before(grammarAccess.getProcessorAccess().getNameProcessorIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getProcessorAccess().getNameProcessorIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getProcessorAccess().getNameProcessorCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Processor__ClockSpeedAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcessorAccess().getClockSpeedClockSpeedParserRuleCall_3_0()); }
		ruleClockSpeed
		{ after(grammarAccess.getProcessorAccess().getClockSpeedClockSpeedParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Processor__CoresAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcessorAccess().getCoresCoresParserRuleCall_4_0()); }
		ruleCores
		{ after(grammarAccess.getProcessorAccess().getCoresCoresParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClockSpeed__ClockSpeedAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClockSpeedAccess().getClockSpeedFLOATParserRuleCall_1_0()); }
		ruleFLOAT
		{ after(grammarAccess.getClockSpeedAccess().getClockSpeedFLOATParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Cores__CoresAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCoresAccess().getCoresINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getCoresAccess().getCoresINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Motherboard__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMotherboardAccess().getNameMotherboardCrossReference_1_0()); }
		(
			{ before(grammarAccess.getMotherboardAccess().getNameMotherboardIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getMotherboardAccess().getNameMotherboardIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getMotherboardAccess().getNameMotherboardCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Memory__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMemoryAccess().getNameMemoryCrossReference_1_0()); }
		(
			{ before(grammarAccess.getMemoryAccess().getNameMemoryIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getMemoryAccess().getNameMemoryIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getMemoryAccess().getNameMemoryCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Memory__CapacityAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMemoryAccess().getCapacityCapacityParserRuleCall_3_0()); }
		ruleCapacity
		{ after(grammarAccess.getMemoryAccess().getCapacityCapacityParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Capacity__CapacityAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCapacityAccess().getCapacityINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getCapacityAccess().getCapacityINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_SL_COMMENT : '--' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
